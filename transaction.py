# -*- coding: utf-8 -*-
"""transaction

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1di8aBiS6BcuJDbyKmz22v96qlbgQV2wl
"""

import pandas as pd

class Transaction:
  def __init__(self):
    """
    Inisialisasi penyimpanan data
    ............................
    self.simpan_item sebagai penyimpanan item/barang (dictionary)
    ............................
    """
    self.simpan_item = {}

  def add_item(self, nama_item, jumlah_item, harga_per_item):
    """
    Fungsi untuk menambah item/barang
    ..........................
    Parameter:
    nama_item (str) akan didefinisikan sebagai key
    jumlah_item (int) dan harga_per_item (int) didefinisikan sebagai value
    ..........................

    """
    self.simpan_item[nama_item] = [jumlah_item, harga_per_item]
   
  def update_item_name(self, nama_item, update_nama_item):
    """
    Fungsi untuk mengubah nama item/barang
    ................................
    Parameter:
    nama_item (str) untuk mencari nama item/barang yang ingin diubah namanya
    update_nama_item (str) sebagai nama item/barang yang baru dari nama_item
    ................................
    """
    self.simpan_item[update_nama_item] = self.simpan_item[nama_item]
    del self.simpan_item[nama_item]
    print(f'Nama item/barang {nama_item} berhasil diubah menjadi {update_nama_item}')
    print(f'\nItem yang dibeli adalah: {self.simpan_item}')

      
  def update_item_qty(self, nama_item, update_jumlah_item):
    """
    Fungsi untuk mengubah jumlah item/barang
    ................................
    Parameter:
    nama_item (str) untuk mencari nama item/barang yang ingin diubah jumlahnya
    update_jumlah_item (int) sebagai jumlah item/barang yang baru dari nama_item
    ................................
    """
    for x, y in self.simpan_item.items():
      try:
        if x == nama_item:
          y[0] = update_jumlah_item
          print(f'\nJumlah item/barang {nama_item} berhasil diubah menjadi {update_jumlah_item}')
          print(f'\nItem yang dibeli adalah: {self.simpan_item}')
      except:
        raise Exception('Maaf, item tidak ditemukan')


  def update_item_price(self, nama_item, update_harga_item):
    """
    Fungsi untuk mengubah hara peritem/barang
    .........................................
    nama_item (str) untuk mencari nama item/barang yang ingin diubah jumlahnya
    update_harga_item (int) sebagai harga item/barang yang baru dari nama_item
    .........................................
    """
    for x, y in self.simpan_item.items():
      try:
        if x == nama_item:
          y[1] = update_harga_item
          print(f'\nHarga item/barang {nama_item} berhasil diubah menjadi {update_harga_item}')
          print(f'\nItem yang dibeli adalah: {self.simpan_item}')
      except:
        raise Exception('Maaf, item tidak ditemukan')

  def delete_item(self, nama_item):
    """
    Fungsi untuk menghapus item/barang
    ..................................
    Parameter:
    nama_item (str) untuk mencari nama item/barang yang ingin dihapus
    ..................................
    """
    del self.simpan_item[nama_item]
    print(f'\nItem/barang {nama_item} berhasil dihapus')
    print(f'\nItem yang dibeli adalah: {self.simpan_item}')

 
  def reset_transaction(self):
    """
    Fungsi untuk menghapus seluruh item/barang
    """
    self.simpan_item.clear()
    print('Semua item berhasil di delete')
    print(f'\nItem yang dibeli adalah: {self.simpan_item}')

  def check_order(self):
    """
    Fungsi untuk mengecek dan menampilkan total harga peritem/barang
    """
    while True:
      if len(self.simpan_item) == 0:
        print(f'\nItem yang dibeli adalah: {self.simpan_item}')
        print('Maaf, item belum ditambah. Silahkan tambah item dulu!')
        return
      else:
        a = 0
        for x, y in self.simpan_item.items():
          x = a
          a+=1
          if type(x) != str and type(y[0]) != int and type(y[1]) != int:
            print(f'\nPesanan {a} Terdapat kesalahan input data')
          else:
            print(f'Pesanan {a} sudah benar')
        print(f'\nItem yang dibeli adalah: {self.simpan_item}')
        print('\n')
        item = pd.DataFrame.from_dict(self.simpan_item, orient ='index', columns=['Jumlah Item', 'Harga/Item'])
        item = item.reset_index()
        item.rename(columns = {'index':'Nama Item'}, inplace = True)
        item['Total Harga'] = item['Jumlah Item'] * item['Harga/Item']
        print(item)
        break

  def total_price(self):
    """
    Fungsi untuk melihat total uang yang harus dibayar 
    dan diskon yang diperoleh customer
    """
    while True:
      if len(self.simpan_item) == 0:
        print(f'\nItem yang dibeli adalah: {self.simpan_item}')
        print('Maaf, item belum ditambah. Silahkan tambah item dulu!')
        return
      else:
        print(f'\nItem yang dibeli adalah: {self.simpan_item}')
        print('\n')
        item = pd.DataFrame.from_dict(self.simpan_item, orient ='index', columns=['Jumlah Item', 'Harga/Item'])
        item = item.reset_index()
        item.rename(columns = {'index':'Nama Item'}, inplace = True)
        item['Total Harga'] = item['Jumlah Item'] * item['Harga/Item']
        print(item)
        Total = item['Total Harga'].sum()
        print(f'\nTotal yang harus dibayarkan!: {Total}')
        if 200000 < Total <= 300000:
          total = Total-(Total * 0.05)
          print('\nSelamat, Anda mendapatkan diskon sebesar 5%')
          print(f'\nTotal yang harus dibayar setelah mendapat diskon!: {total}')
        elif 300000 < Total <= 500000:
          total = Total-(Total * 0.08)
          print('\nSelamat, Anda mendapatkan diskon sebesar 8%')
          print(f'\nTotal yang harus dibayar setelah mendapat diskon!: {total}')
        elif Total > 500000:
          total = Total-(Total * 0.1)
          print('\nSelamat, Anda mendapatkan diskon sebesar 10%')
          print(f'\nTotal yang harus dibayar setelah mendapat diskon!: {total}')
        else:
          print('Maaf, Anda tidak mendapatkan diskon')
      break